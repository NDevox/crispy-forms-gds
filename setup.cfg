#
# crispy-forms-gds package
#
[metadata]
name = crispy-forms-gds
version = 0.1.0
description = Django application to add 'django-crispy-forms' layout objects for the GOV.UK Design System.
long_description = file:README.rst
long_description_content_type = text/x-rst
url = https://github.com/wildfish/crispy-forms-gds
license = BSD 3-Clause Licens
license_file = LICENCE.txt
author = Stuart MacKay
author_email = stuart@wildfish.com
keywords = Django, django-crispy-forms, gov.uk, design system
classifiers =
    Development Status :: 5 - Production/Stable
    Environment :: Web Environment
    Framework :: Django
    Framework :: Django :: 2.2
    Framework :: Django :: 3.0
    Intended Audience :: Developers
    License :: OSI Approved :: BSD License
    Operating System :: OS Independent
    Programming Language :: Python
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.5
    Programming Language :: Python :: 3.6
    Programming Language :: Python :: 3.7
    Programming Language :: Python :: 3.8
    Topic :: Internet :: WWW/HTTP
    Topic :: Internet :: WWW/HTTP :: Dynamic Content
    Topic :: Software Development :: Libraries :: Python Modules

[options]
include_package_data = True
install_requires =
    Django>=2.2
    django-crispy-forms>=1.9.0
packages = crispy_forms_gds
package_dir =
    = src
zip_safe = True

# The following sections are not needed - despite what you reed in the
# documentation and see in other people's setup or config files.
#
# [options.packages.find] - since we only have one top-level package we
# can specify it directly - but we still need to make sure any sub-packages
# are picked up in the MANIFEST.in. Using the src directory simplifies
# everything since we don't need to worry about excluding any of the
# top-level directories that contain python, specifically the sandbox and
# tests.
#
# [options.package_data] - does not work for source distributions. For
# those you need MANIFEST.in. This section is used by binary distribution
# but it will also use the manifest if it exists. So it's not needed at all.
#
# [options.data_files] - it's the same story for data files. If MANIFEST.in
# is available it will be used for source and binary distributions.
#
# See:
# https://stackoverflow.com/questions/7522250/how-to-include-package-data-with-setuptools-distribute
# http://blog.codekills.net/2011/07/15/lies,-more-lies-and-python-packaging-documentation-on--package_data-/
#

[egg_info]
# Make sure the egg is created in the root directory rather than in src.
# Eggs are only built for source distributions.
egg_base = .

#
# Third-party packages configuration
#

[flake8]
max-line-length = 88
ignore = E123,E128,E203,E501,W503
exclude =
    .git,
    .venv,
    .tox,
    venv,
    build,
    docs

[tool:pytest]
addopts = --black --flake8 --cov=src --cov-report=term --cov-report=html
python_files =
    test_*.py
testpaths =
    tests

[tox:tox]
envlist =
    py35-django{220,300}
    py36-django{220,300}
    py37-django{220,300}
    py38-django{220,300}

minversion = 3.4.0

[testenv]
deps =
    django220: Django>=2.2,<2.3
    django300: Django>=3.0,<3.1
    pytest
    pytest-black
    pytest-flake8
    pytest-cov

commands =
    make install-packages
    pytest

[build_sphinx]
source-dir = docs
build-dir = docs/_build

[isort]
multi_line_output = 3
line_length = 88
known_django = django
sections = FUTURE,STDLIB,DJANGO,THIRDPARTY,FIRSTPARTY,LOCALFOLDER
include_trailing_comma = True
lines_after_imports = 2
skip = .git,node_modules,migrations

