#
# Makefile: Commands to simplify the release process
#

package_name = "crispy_forms_gds"

# Make selects the first target in a file as the default. Here we
# define the default explicitly in case it gets moved around.
.DEFAULT_GOAL := help

# The version of python we want to use
python := python3.6
venv_path := .venv

# Where everything lives
pip := ${venv_path}/bin/pip
black := ${venv_path}/bin/black
flake8 := ${venv_path}/bin/flake8
pytest := ${venv_path}/bin/pytest
django := ${venv_path}/bin/python demo/manage.py

src_dir := src
package_dir := ${src_dir}/${package_name}
tests_dir := tests

# The changelog is a markdown file used the structure described in
# https://keepachangelog.com/en/1.0.0/. Both the setup.cfg and the
# changelog are updated with the updated version number when a new
# release is made.

config_file := setup.cfg
version_file := ${package_dir}/__init__.py
changelog_file = CHANGELOG.md
release_date := `date +%Y-%m-%d`

# Repository related configuration
#
# Commits and uploads to PyPI can be optionally signed using your GPG key.
# See the following github guide for generating a GPG key and how to set it
# up so you can sign commits. Twine can use the same key to sign uploads
# when the package is deployed to PyPI.
#
# https://help.github.com/en/github/authenticating-to-github/signing-commits
# https://twine.readthedocs.io/en/latest/

sign_commits := yes
sign_uploads := yes

gpg_key_id := `git config --global --get user.signingkey`

release_branch := master
release_message = "Updated for release ${VERSION}"


.PHONY: help
help:
	@echo "Please use \`make <target>' where <target> is one of:"
	@echo ""
	@echo "  setup             -- to setup everything needed for development"
	@echo "  clean             -- to clean everything"
	@echo "  tests             -- to run all the lint checks and tests"
	@echo "  release           -- to build the release and upload it to PyPI"
	@echo "  demo              -- to run the Django demo site"
	@echo ""
	@echo "When running the release target you must give the version number"
	@echo "e.g. make release VERSION=1.4.2"
	@echo ""
	@echo "There are various minor targets which can be used to perform setup and"
	@echo "cleaning tasks if you want to run various tools from the command line:"
	@echo ""
	@echo "  setup-venv        -- to setup the virtualenv and install dependencies"
	@echo ""
	@echo "  clean-venv        -- to clean the virtualenv"
	@echo "  clean-pycache     -- to recursively remove all __pycache__ folders"
	@echo "  clean-coverage    -- to clean all the files generated by coverage"
	@echo "  clean-packages    -- to clean all the files generated by a release"
	@echo "  clean-tox         -- to clean all the files generated by tox"
	@echo "  clean-install     -- to remove the package from the virtualenv"
	@echo ""
	@echo "  build-packages    -- to build the packages for distribution"
	@echo "  install-packages  -- to install the package in the virtualenv"
	@echo

.PHONY: setup-venv
setup-venv:
	${python} -m venv ${venv_path}
	${pip} install --upgrade pip
	${pip} install --upgrade setuptools
	${pip} install -r requirements.txt

.PHONY: setup
setup: setup-venv

.PHONY: clean-venv
clean-venv:
	rm --recursive --force ${venv_path}

.PHONY: clean-pycache
clean-pycache:
	rm -Rf .pytest_cache
	find . -type d -name "__pycache__"|xargs rm -Rf
	find . -name "*\.pyc"|xargs rm -f

.PHONY: clean-coverage
clean-coverage:
	rm --recursive --force coverage
	rm --recursive --force htmlcov

.PHONY: clean-tox
clean-tox:
	rm --recursive --force .tox

.PHONY: clean-packages
clean-packages:
	rm --recursive --force ${package_name}.eggo-info
	rm --recursive --force build
	rm --recursive --force dist

.PHONY: clean-install
clean-install:
	${pip} uninstall --yes ${package_name}

.PHONY: clean
clean: clean-venv clean-pycache clean-coverage clean-tox clean-packages clean-install

.PHONY: build-packages
build-packages: clean-packages
	python setup.py sdist bdist_wheel

.PHONY: install-packages
install-packages: build-packages
	cd dist && pip install ${package_name}*

.PHONY: tests
tests: install-packages
	${pytest} ${tests_dir}

.PHONY: check-version
check-version:
	[ -n "${VERSION}" ]

.PHONY: update-setup
update-setup: check-version
	sed -i "s/^version = .*/version = ${VERSION}/" ${config_file}
	git add ${config_file}

.PHONY: update-package
update-package:
	sed -i "s/^__version__ = .*/__version__ = \"${VERSION}\"/" ${version_file}
	git add ${version_file}

.PHONY: update-changelog
update-changelog: check-version
	awk -v version=${VERSION} -v date=${release_date} \
		'NR==1,/##.*/{sub(/##.*/, "## ["version"] - "date)} 1' ${changelog_file}
	git add ${changelog_file}

.PHONY: update-repository
update-repository: check-version
	ifeq (${sign_commit}, yes)
		git commit -S -m ${release_message}
		git tag -s ${VERSION} -m ${VERSION}
	else
		git commit -m ${release_message}
		git tag ${VERSION} -m ${VERSION}
	endif
	git push origin ${release_branch}
	git push --tags

.PHONY: upload-to-pypi
upload-to-pypi: build-packages
	ifeq (${sign_upload}, yes)
		twine upload --sign --identity ${gpg_key_id} dist/*
	else
		twine upload dist/*
	endif

.PHONY: release
release: update-package update-setup update-changelog update-repository build-packages upload-to-pypi

.PHONY: demo
demo:
	${django} runserver
